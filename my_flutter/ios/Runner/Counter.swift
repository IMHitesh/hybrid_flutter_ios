// Autogenerated from Pigeon (v8.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol Counter {
  func onTimerStartOrChange(state: String, duration: Int32) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class CounterSetup {
  /// The codec used by Counter.
  /// Sets up an instance of `Counter` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: Counter?) {
    let onTimerStartOrChangeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Counter.onTimerStartOrChange", binaryMessenger: binaryMessenger)
    if let api = api {
      onTimerStartOrChangeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let stateArg = args[0] as! String
        let durationArg = args[1] as! Int32
        do {
          try api.onTimerStartOrChange(state: stateArg, duration: durationArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onTimerStartOrChangeChannel.setMessageHandler(nil)
    }
  }
}
