// Autogenerated from Pigeon (v8.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct User {
  var id: Int32? = nil
  var email: String? = nil
  var name: String? = nil
  var gender: String? = nil
  var status: String? = nil

  static func fromList(_ list: [Any?]) -> User? {
    let id = list[0] as? Int32 
    let email = list[1] as? String 
    let name = list[2] as? String 
    let gender = list[3] as? String 
    let status = list[4] as? String 

    return User(
      id: id,
      email: email,
      name: name,
      gender: gender,
      status: status
    )
  }
  func toList() -> [Any?] {
    return [
      id,
      email,
      name,
      gender,
      status,
    ]
  }
}
private class LoginCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return User.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class LoginCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? User {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class LoginCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return LoginCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return LoginCodecWriter(data: data)
  }
}

class LoginCodec: FlutterStandardMessageCodec {
  static let shared = LoginCodec(readerWriter: LoginCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol Login {
  func loginSuccess(user: User) throws
  func loginFailed(message: String) throws
  func validateCredential(isValid: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class LoginSetup {
  /// The codec used by Login.
  static var codec: FlutterStandardMessageCodec { LoginCodec.shared }
  /// Sets up an instance of `Login` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: Login?) {
    let loginSuccessChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Login.loginSuccess", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loginSuccessChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let userArg = args[0] as! User
        do {
          try api.loginSuccess(user: userArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loginSuccessChannel.setMessageHandler(nil)
    }
    let loginFailedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Login.loginFailed", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      loginFailedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let messageArg = args[0] as! String
        do {
          try api.loginFailed(message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      loginFailedChannel.setMessageHandler(nil)
    }
    let validateCredentialChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Login.validateCredential", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      validateCredentialChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isValidArg = args[0] as! Bool
        do {
          try api.validateCredential(isValid: isValidArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      validateCredentialChannel.setMessageHandler(nil)
    }
  }
}
/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol Splash {
  func onAuthStatusChange(isLogin: Bool) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class SplashSetup {
  /// The codec used by Splash.
  /// Sets up an instance of `Splash` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: Splash?) {
    let onAuthStatusChangeChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Splash.onAuthStatusChange", binaryMessenger: binaryMessenger)
    if let api = api {
      onAuthStatusChangeChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isLoginArg = args[0] as! Bool
        do {
          try api.onAuthStatusChange(isLogin: isLoginArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onAuthStatusChangeChannel.setMessageHandler(nil)
    }
  }
}
