// Autogenerated from Pigeon (v8.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}


private class DashboardCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return User.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DashboardCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? User {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DashboardCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DashboardCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DashboardCodecWriter(data: data)
  }
}

class DashboardCodec: FlutterStandardMessageCodec {
  static let shared = DashboardCodec(readerWriter: DashboardCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol Dashboard {
  func onLogoutResponse(isLogout: Bool, message: String) throws
  func fetchUserListSuccess(users: [User]?, message: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DashboardSetup {
  /// The codec used by Dashboard.
  static var codec: FlutterStandardMessageCodec { DashboardCodec.shared }
  /// Sets up an instance of `Dashboard` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: Dashboard?) {
    let onLogoutResponseChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Dashboard.onLogoutResponse", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onLogoutResponseChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isLogoutArg = args[0] as! Bool
        let messageArg = args[1] as! String
        do {
          try api.onLogoutResponse(isLogout: isLogoutArg, message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onLogoutResponseChannel.setMessageHandler(nil)
    }
    let fetchUserListSuccessChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Dashboard.fetchUserListSuccess", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      fetchUserListSuccessChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usersArg = args[0] as? [User]
        let messageArg = args[1] as! String
        do {
          try api.fetchUserListSuccess(users: usersArg, message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      fetchUserListSuccessChannel.setMessageHandler(nil)
    }
  }
}
/// Generated class from Pigeon that represents Flutter messages that can be called from Swift.
class DashboardInteractor {
  private let binaryMessenger: FlutterBinaryMessenger
  init(binaryMessenger: FlutterBinaryMessenger){
    self.binaryMessenger = binaryMessenger
  }
  func fetchUserList(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.DashboardInteractor.fetchUserList", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
  func onLogout(completion: @escaping () -> Void) {
    let channel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.DashboardInteractor.onLogout", binaryMessenger: binaryMessenger)
    channel.sendMessage(nil) { _ in
      completion()
    }
  }
}
