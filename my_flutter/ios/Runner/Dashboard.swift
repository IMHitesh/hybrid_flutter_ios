// Autogenerated from Pigeon (v8.0.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
//struct User {
//  var id: Int32? = nil
//  var email: String? = nil
//  var name: String? = nil
//  var gender: String? = nil
//  var status: String? = nil
//
//  static func fromList(_ list: [Any?]) -> User? {
//    let id = list[0] as? Int32 
//    let email = list[1] as? String 
//    let name = list[2] as? String 
//    let gender = list[3] as? String 
//    let status = list[4] as? String 
//
//    return User(
//      id: id,
//      email: email,
//      name: name,
//      gender: gender,
//      status: status
//    )
//  }
//  func toList() -> [Any?] {
//    return [
//      id,
//      email,
//      name,
//      gender,
//      status,
//    ]
//  }
//}
private class DashboardCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return User.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class DashboardCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? User {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class DashboardCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return DashboardCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return DashboardCodecWriter(data: data)
  }
}

class DashboardCodec: FlutterStandardMessageCodec {
  static let shared = DashboardCodec(readerWriter: DashboardCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol Dashboard {
  func onLogout(isLogout: Bool, message: String) throws
  func onUserFetch(users: [User]?, message: String) throws
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class DashboardSetup {
  /// The codec used by Dashboard.
  static var codec: FlutterStandardMessageCodec { DashboardCodec.shared }
  /// Sets up an instance of `Dashboard` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: Dashboard?) {
    let onLogoutChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Dashboard.onLogout", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onLogoutChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let isLogoutArg = args[0] as! Bool
        let messageArg = args[1] as! String
        do {
          try api.onLogout(isLogout: isLogoutArg, message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onLogoutChannel.setMessageHandler(nil)
    }
    let onUserFetchChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.Dashboard.onUserFetch", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      onUserFetchChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let usersArg = args[0] as? [User]
        let messageArg = args[1] as! String
        do {
          try api.onUserFetch(users: usersArg, message: messageArg)
          reply(wrapResult(nil))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      onUserFetchChannel.setMessageHandler(nil)
    }
  }
}
